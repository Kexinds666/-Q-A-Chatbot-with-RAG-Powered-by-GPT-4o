version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rag-chatbot-postgres
    environment:
      POSTGRES_DB: rag_chatbot
      POSTGRES_USER: rag_user
      POSTGRES_PASSWORD: rag_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rag_user -d rag_chatbot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rag-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: rag-chatbot-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rag-network

  # AI Backend Service
  ai-backend:
    build:
      context: ./ai-backend
      dockerfile: Dockerfile
    container_name: rag-chatbot-ai-backend
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql+asyncpg://rag_user:rag_password@postgres:5432/rag_chatbot
      - REDIS_URL=redis://redis:6379
      - CHROMA_PERSIST_DIRECTORY=/app/data/chroma_db
      - LOG_LEVEL=INFO
      - DEBUG=false
    volumes:
      - ai_backend_data:/app/data
      - ai_backend_uploads:/app/uploads
      - ai_backend_processed:/app/processed
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network
    restart: unless-stopped

  # Interface Layer (Node.js)
  interface-layer:
    build:
      context: ./interface-layer
      dockerfile: Dockerfile
    container_name: rag-chatbot-interface
    environment:
      - NODE_ENV=production
      - AI_BACKEND_URL=http://ai-backend:8000
      - REDIS_URL=redis://redis:6379
      - FRONTEND_URL=http://localhost:3000
      - PORT=5000
    ports:
      - "5000:5000"
    depends_on:
      ai-backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network
    restart: unless-stopped

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rag-chatbot-frontend
    environment:
      - VITE_SOCKET_URL=http://localhost:5000
      - VITE_API_URL=http://localhost:5000/api
    ports:
      - "3000:80"
    depends_on:
      interface-layer:
        condition: service_healthy
    networks:
      - rag-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: rag-chatbot-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - interface-layer
      - ai-backend
    networks:
      - rag-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ai_backend_data:
    driver: local
  ai_backend_uploads:
    driver: local
  ai_backend_processed:
    driver: local

networks:
  rag-network:
    driver: bridge
